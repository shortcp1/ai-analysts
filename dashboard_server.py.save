from flask import Flask, jsonify, request
import json, os, sqlite3, time

app = Flask(__name__)

# === File Paths ===
BASE_DIR = os.path.dirname(__file__)
CONFIG_FILE = os.path.join(BASE_DIR, "agents_config.json")
LOG_FILE = os.path.join(BASE_DIR, "agent_logs.txt")
DB_FILE = os.path.join(BASE_DIR, "run_history.db")

# === Utility: Load/Save Config ===
def load_config():
    if not os.path.exists(CONFIG_FILE):
        return {}
    with open(CONFIG_FILE, "r") as f:
        return json.load(f)

def save_config(data):
    with open(CONFIG_FILE, "w") as f:
        json.dump(data, f, indent=4)

# === Utility: Load Logs ===
def load_logs(lines=50):
    if not os.path.exists(LOG_FILE):
        return []
    with open(LOG_FILE, "r") as f:
        return f.readlines()[-lines:]

def append_log(message):
    """Append a single log entry with timestamp"""
    with open(LOG_FILE, "a") as f:
        f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")

# === Utility: Init DB ===
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS run_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            user_request TEXT,
            manager_scope TEXT,
            final_output TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# ============================
#  Health Check
# ============================
@app.route("/health", methods=["GET"])
def health_check():
    return jsonify({"status": "dashboard alive", "timestamp": time.time()})

# ============================
# 1. GET/POST Agent Config
# ============================
@app.route("/agents/config", methods=["GET", "POST"])
def agents_config():
    if request.method == "GET":
        return jsonify(load_config())

    elif request.method == "POST":
        try:
            new_config = request.json
            save_config(new_config)
            append_log("üîß Agent config updated via dashboard")
            return jsonify({"message": "Config updated successfully"}), 200
        except Exception as e:
            return jsonify({"error": str(e)}), 500

# ============================
# 2. GET Agent Logs
# ============================
@app.route("/agents/logs", methods=["GET"])
def agents_logs():
    last_lines = int(request.args.get("lines", 50))  # default 50
    return jsonify({"logs": load_logs(last_lines)})

# ============================
# 3. GET Run History
# ============================
@app.route("/runs/history", methods=["GET"])
def run_history():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT id, timestamp, user_request, manager_scope, final_output FROM run_history ORDER BY id DESC LIMIT 50")
    rows = c.fetchall()
    conn.close()
    history = [
        {"id": r[0], "timestamp": r[1], "user_request": r[2], "manager_scope": r[3], "final_output": r[4]}
        for r in rows
    ]
    return jsonify({"history": history})

# ============================
# 4. POST Run Control Endpoints
# ============================
@app.route("/runs/start", methods=["POST"])
def run_start():
    req_data = request.json or {}
    user_request = req_data.get("user_request", "No input provided")
    append_log(f"üöÄ Run started: {user_request}")
    # TODO: trigger actual crew run here (can call Slack server or crew script)
    return jsonify({"message": "Run started", "user_request": user_request})

@app.route("/runs/pause", methods=["POST"])
def run_pause():
    append_log("‚è∏ Run paused by user")
    # TODO: set a shared PAUSED flag for crew
    return jsonify({"message": "Run paused"})

@app.route("/runs/approve", methods=["POST"])
def run_approve():
    append_log("‚úÖ Run approved & continued")
    # TODO: resume crew from Manager Scope Lock
    return jsonify({"message": "Run approved & resumed"})

@app.route("/runs/abort", methods=["POST"])
def run_abort():
    append_log("‚ùå Run aborted by user")
    # TODO: set a shared ABORT flag for crew
    return jsonify({"message": "Run aborted"})

# ============================
# Debug helper: write fake log
# ============================
@app.route("/agents/fake-log", methods=["POST"])
def fake_log():
    msg = request.args.get("msg", "test log")
    append_log(msg)
    return jsonify({"message": f"Fake log added: {msg}"})

@app.route("/dashboard", methods=["GET"])
def dashboard_home():
    # Load current config and logs for display
    cfg = load_config()
    logs = load_logs(lines=20)
    return f"""
    <html>
    <head>
        <title>Agent Dashboard</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
        <style>
            body {{ padding: 20px; }}
            pre {{ background: #f8f9fa; padding: 10px; border-radius: 5px; }}
        </style>
    </head>
    <body>
        <h1>ü§ñ Agent Control Dashboard</h1>

        <h3>1Ô∏è‚É£ Current Agent Config</h3>
        <form method="post" action="/dashboard/update" enctype="application/json">
            <textarea name="config" rows="12" class="form-control">{json.dumps(cfg, indent=4)}</textarea>
            <br/>
            <button class="btn btn-primary" type="submit">üíæ Save Config</button>
        </form>

        <hr>

        <h3>2Ô∏è‚É£ Live Logs (last 20)</h3>
        <pre>{"".join(logs)}</pre>
        <a href="/dashboard" class="btn btn-secondary">üîÑ Refresh Logs</a>

        <hr>

        <h3>3Ô∏è‚É£ Quick Controls</h3>
        <div class="btn-group">
            <button onclick="fetch('/runs/start',{{method:'POST'}})" class="btn btn-success">üöÄ Start Run</button>
            <button onclick="fetch('/runs/pause',{{method:'POST'}})" class="btn btn-warning">‚è∏ Pause</button>
            <button onclick="fetch('/runs/approve',{{method:'POST'}})" class="btn btn-info">‚úÖ Approve & Continue</button>
            <button onclick="fetch('/runs/abort',{{method:'POST'}})" class="btn btn-danger">‚ùå Abort</button>
        </div>

        <hr>
        <h3>4Ô∏è‚É£ Run History</h3>
        <iframe src="/dashboard/history" style="width:100%; height:300px; border:none;"></iframe>
    <iframe src="/dashboard/history" style="width:100%; height:300px; border:none;"></iframe>
    
<script>
    const LOG_URL = "http://138.197.125.240:5000/agents/logs?lines=20";
    async function fetchLogs() {{
        const container = document.querySelector('pre');
        try {{
            const res = await fetch(LOG_URL, {{ cache: "no-store" }});
            if (!res.ok) {{
                container.innerText = `‚ö†Ô∏è Error fetching logs: HTTP ${{res.status}}`;
                return;
            }}
            const data = await res.json();
            container.innerText = data.logs.join('');
        }} catch (e) {{
            container.innerText = `‚ö†Ô∏è Fetch failed: ${{e}}`;
        }}
    }}
    fetchLogs();
    setInterval(fetchLogs, 5000);
</script>
    <script>
        const LOG_URL = "http://138.197.125.240:5000/agents/logs?lines=20";
    
        async function fetchLogs() {
            const container = document.querySelector('pre');  // finds the logs <pre>
            try {
                const res = await fetch(LOG_URL, { cache: "no-store" });
                if (!res.ok) {
                    container.innerText = `‚ö†Ô∏è Error fetching logs: HTTP ${res.status}`;
                    return;
                }
                const data = await res.json();
                container.innerText = data.logs.join('');
            } catch (e) {
                container.innerText = `‚ö†Ô∏è Fetch failed: ${e}`;
            }
        }
    
        fetchLogs();            // Initial load
        setInterval(fetchLogs, 5000);  // Auto-refresh every 5 seconds
    </script>
    
    </body>
    </html>
    </body>
    </html>
    """

@app.route("/dashboard/update", methods=["POST"])
def dashboard_update():
    try:
        raw = request.form.get("config")
        new_cfg = json.loads(raw)
        save_config(new_cfg)
        append_log("üîß Config updated via Web Dashboard UI")
        return "<h3>‚úÖ Config updated successfully!</h3><a href='/dashboard'>Go Back</a>"
    except Exception as e:
        return f"<h3>‚ùå Error updating config: {e}</h3><a href='/dashboard'>Go Back</a>"

@app.route("/dashboard/history", methods=["GET"])
def dashboard_history_view():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT id, timestamp, user_request FROM run_history ORDER BY id DESC LIMIT 20")
    rows = c.fetchall()
    conn.close()

    table = "<table class='table table-striped'><thead><tr><th>ID</th><th>Time</th><th>Request</th></tr></thead><tbody>"
    for r in rows:
        table += f"<tr><td>{r[0]}</td><td>{r[1]}</td><td>{r[2]}</td></tr>"
    table += "</tbody></table>"
    return table

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=False, threaded=True)
